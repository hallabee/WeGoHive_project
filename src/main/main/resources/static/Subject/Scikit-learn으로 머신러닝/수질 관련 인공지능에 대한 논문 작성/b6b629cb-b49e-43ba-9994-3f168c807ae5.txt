1.자동 리소스 확장/축소: 오토스케일링은 애플리케이션의 트래픽이나 부하 변화에 따라 서버 리소스를 자동으로 늘리거나 줄일 수 있습니다. 이로 인해 예기치 못한 트래픽 급증에도 빠르게 대응할 수 있으며, 리소스 낭비를 줄여 비용 효율성을 높일 수 있습니다.
비용 최적화: 오토스케일링은 수요에 맞춰 리소스를 자동으로 조정하므로, 필요하지 않은 리소스를 유지하지 않아 불필요한 비용을 절감할 수 있습니다. 트래픽이 적을 때는 리소스를 줄이고, 트래픽이 많을 때는 자동으로 확장되므로 비용을 최소화하면서도 성능을 최적화할 수 있습니다.
2.소유 및 관리: 퍼블릭 클라우드: 퍼블릭 클라우드는 클라우드 서비스 제공업체(예: AWS, Microsoft Azure, Google Cloud)가 소유하고 운영합니다. 여러 고객이 동일한 물리적 자원을 공유하지만, 각 고객의 데이터는 논리적으로 분리되어 안전하게 관리됩니다.

프라이빗 클라우드: 프라이빗 클라우드는 특정 기업이나 조직에 의해 소유되며, 해당 기업의 데이터 센터 내에서 운영되거나 제3의 서비스 제공자가 관리할 수 있습니다. 독점적인 자원을 사용하므로 다른 고객과 리소스를 공유하지 않습니다.
보안 및 제어:

퍼블릭 클라우드: 퍼블릭 클라우드는 다수의 고객이 자원을 공유하기 때문에 보안과 제어에 있어 상대적으로 제한적일 수 있습니다. 하지만, 클라우드 서비스 제공업체는 고급 보안 기능을 제공하고, 물리적 보안이 잘 유지됩니다.
프라이빗 클라우드: 프라이빗 클라우드는 특정 조직만 사용하는 환경이므로, 보안과 제어 측면에서 더 높은 수준의 맞춤형 설정이 가능합니다. 더 엄격한 보안 정책을 적용할 수 있고, 중요한 데이터나 규제 준수가 필요한 작업에 적합합니다.
비용:

퍼블릭 클라우드: 퍼블릭 클라우드는 사용량 기반으로 요금이 부과되며, 자원의 효율적 사용이 가능하여 비용이 절감됩니다. 인프라를 직접 관리할 필요가 없으므로 초기 비용이 낮습니다.
프라이빗 클라우드: 프라이빗 클라우드는 초기 설치 비용이 크고, 관리와 유지에 드는 비용이 더 높을 수 있습니다. 하지만 자원을 독점적으로 사용할 수 있고, 요구 사항에 맞춘 맞춤형 환경을 제공합니다.
확장성:

퍼블릭 클라우드: 퍼블릭 클라우드는 대규모로 확장 가능한 인프라를 제공하므로, 필요에 따라 쉽게 리소스를 확장하거나 축소할 수 있습니다.
프라이빗 클라우드: 프라이빗 클라우드는 필요에 따라 확장이 가능하지만, 퍼블릭 클라우드에 비해 자원의 확장이 상대적으로 제한적일 수 있습니다.
3.데이터 손실 방지: 클라우드 환경에서도 시스템 장애, 소프트웨어 오류, 사용자 실수, 악성 공격(예: 랜섬웨어) 등으로 인해 데이터가 손실될 수 있습니다. 데이터 백업 전략은 이러한 상황에서 중요한 데이터를 복구할 수 있도록 보장해 주며, 비즈니스 연속성을 유지하는 데 필수적입니다.

규제 준수 및 법적 요구사항: 일부 산업 분야에서는 특정 데이터를 일정 기간 동안 보관해야 하거나, 규정에 맞게 백업을 해야 할 의무가 있습니다. 클라우드 환경에서 데이터 백업 전략을 수립하면 이러한 법적 요구사항을 충족할 수 있으며, 감사 및 규제 검토 시 필요한 데이터를 쉽게 제공할 수 있습니다.

비즈니스 연속성 확보: 예기치 않은 재해나 시스템 다운타임이 발생할 경우, 백업된 데이터를 통해 신속하게 복구하고 비즈니스 운영을 재개할 수 있습니다. 클라우드 환경에서는 빠른 복구와 유연한 리소스 할당을 통해 비즈니스 연속성을 효과적으로 유지할 수 있습니다.

자동화 및 효율성: 클라우드 환경에서 백업 전략은 자동화된 방식으로 구현할 수 있습니다. 클라우드 서비스 제공자는 다양한 자동 백업 옵션을 제공하며, 이를 통해 수동으로 관리할 필요 없이 효율적으로 백업을 수행하고 데이터를 안전하게 보호할 수 있습니다.

4.서버 관리 불필요: 서버리스 컴퓨팅은 서버의 프로비저닝, 관리 및 확장에 대한 걱정 없이 애플리케이션을 실행할 수 있습니다. 사용자는 코드만 작성하면 되고, 서버나 인프라 관리는 클라우드 서비스 제공자가 자동으로 처리합니다. 이는 개발자가 비즈니스 로직에 집중할 수 있게 해줍니다.

자동 확장성: 서버리스 환경에서는 트래픽의 변화에 따라 자동으로 리소스가 확장되거나 축소됩니다. 사용자는 사전에 리소스를 할당할 필요 없이, 애플리케이션의 부하에 맞춰 컴퓨팅 리소스가 자동으로 조정되므로, 효율적인 자원 관리와 확장이 가능합니다.

비용 효율성: 서버리스 컴퓨팅에서는 실제로 코드가 실행되는 시간만큼만 비용이 발생합니다. 즉, 애플리케이션이 활성화된 시간에만 비용이 부과되므로, 불필요한 리소스를 낭비하지 않고 사용자가 실제로 소비한 만큼만 비용을 지불하게 됩니다. 이는 비용 절감에 큰 도움이 됩니다.
5.docker images
6.docker run -d -p 80:8080 nginx
7.docker exec -it my_container /bin/bash
8.kubectl delete pod test-pod
9.apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
spec:
  containers:
  - name: nginx
    image: nginx
    ports:
    - containerPort: 80